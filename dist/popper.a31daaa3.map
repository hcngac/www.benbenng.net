{"version":3,"sources":["node_modules/popper.js/dist/popper.js"],"names":["isBrowser","window","document","longerTimeoutBrowsers","timeoutDuration","i","length","navigator","userAgent","indexOf","microtaskDebounce","fn","called","Promise","resolve","then","taskDebounce","scheduled","supportsMicroTasks","debounce","isFunction","functionToCheck","toString","call","getStyleComputedProperty","element","property","nodeType","css","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","body","ownerDocument","overflow","overflowX","overflowY","test","isIE11","MSInputMethodContext","documentMode","isIE10","isIE","version","getOffsetParent","documentElement","noOffsetParent","offsetParent","nextElementSibling","isOffsetContainer","firstElementChild","getRoot","node","findCommonOffsetParent","element1","element2","order","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","start","end","range","createRange","setStart","setEnd","commonAncestorContainer","contains","element1root","getScroll","side","upperSide","html","scrollingElement","includeScroll","rect","subtract","scrollTop","scrollLeft","modifier","top","bottom","left","right","getBordersSize","styles","axis","sideA","sideB","parseFloat","getSize","computedStyle","Math","max","parseInt","getWindowSizes","_extends","Object","assign","target","arguments","source","key","prototype","hasOwnProperty","getClientRect","offsets","width","height","getBoundingClientRect","e","result","sizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getOffsetRectRelativeToArbitraryNode","children","parent","fixedPosition","isHTML","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","getViewportOffsetRectRelativeToArtbitraryNode","excludeScroll","relativeOffset","innerWidth","innerHeight","isFixed","getFixedPositionOffsetParent","parentElement","el","getBoundaries","popper","reference","padding","boundariesElement","boundaries","boundariesNode","isPaddingNumber","getArea","computeAutoPlacement","placement","refRect","rects","sortedAreas","keys","map","sort","a","b","area","filteredAreas","filter","computedPlacement","variation","split","getReferenceOffsets","state","getOuterSizes","x","marginBottom","y","marginRight","getOppositePlacement","hash","replace","matched","getPopperOffsets","referenceOffsets","popperRect","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","find","arr","check","Array","findIndex","prop","value","cur","match","obj","runModifiers","modifiers","data","ends","undefined","slice","forEach","warn","enabled","update","isDestroyed","options","positionFixed","flip","originalPlacement","position","isCreated","onUpdate","onCreate","isModifierEnabled","modifierName","some","name","getSupportedPropertyName","prefixes","upperProp","charAt","toUpperCase","prefix","toCheck","style","destroy","removeAttribute","willChange","disableEventListeners","removeOnDestroy","removeChild","getWindow","defaultView","attachToScrollParents","event","callback","scrollParents","isBody","addEventListener","passive","push","setupEventListeners","updateBound","scrollElement","eventsEnabled","enableEventListeners","scheduleUpdate","removeEventListeners","removeEventListener","isNumeric","n","isNaN","isFinite","setStyles","unit","setAttributes","attributes","setAttribute","applyStyle","instance","arrowElement","arrowStyles","applyStyleOnLoad","modifierOptions","computeStyle","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","floor","round","prefixedProperty","invertTop","invertLeft","arrow","isModifierRequired","requestingName","requestedName","requesting","isRequired","requested","querySelector","isVertical","len","sideCapitalized","toLowerCase","altSide","opSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","min","getOppositeVariation","placements","validPlacements","clockwise","counter","index","concat","reverse","BEHAVIORS","flipped","placementOpposite","flipOrder","behavior","FLIP","CLOCKWISE","COUNTERCLOCKWISE","step","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariation","flipVariations","keepTogether","toValue","str","size","parseOffset","offset","basePlacement","useHeight","fragments","frag","trim","divider","search","splitRegex","ops","op","mergeWithPrevious","reduce","index2","preventOverflow","transformProp","popperStyles","transform","priority","escapeWithReference","shift","shiftvariation","shiftOffsets","hide","bound","inner","subtractLength","Defaults","Popper","requestAnimationFrame","bind","jquery","onLoad","Utils","global","PopperUtils"],"mappings":"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","file":"popper.a31daaa3.map","sourceRoot":"..","sourcesContent":["/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.14.4\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nconst longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nlet timeoutDuration = 0;\nfor (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  let called = false;\n  return () => {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(() => {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  const getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const css = getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles[`border${sideA}Width`], 10) + parseFloat(styles[`border${sideB}Width`], 10);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body[`offset${axis}`], body[`scroll${axis}`], html[`client${axis}`], html[`offset${axis}`], html[`scroll${axis}`], isIE(10) ? parseInt(html[`offset${axis}`]) + parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width = sizes.width || element.clientWidth || result.right - result.left;\n  const height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = isIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop, 10);\n    const marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement, fixedPosition = false) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement, padding = 0) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  const sortedAreas = Object.keys(rects).map(key => _extends({\n    key\n  }, rects[key], {\n    area: getArea(rects[key])\n  })).sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(({ width, height }) => width >= popper.clientWidth && height >= popper.clientHeight);\n\n  const computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  const styles = getComputedStyle(element);\n  const x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  const y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(({ name, enabled }) => enabled && name === modifierName);\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(data.instance.modifiers, modifier => modifier.name === 'applyStyle').gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  const gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position\n  };\n\n  // Avoid blurry text by using full pixel integers.\n  // For pixel-perfect positioning, top/bottom prefers rounded\n  // values, while left/right prefers floored values.\n  const offsets = {\n    left: Math.floor(popper.left),\n    top: Math.round(popper.top),\n    bottom: Math.round(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired = !!requesting && modifiers.some(modifier => {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(`${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`);\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`], 10);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`], 10);\n  let sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '' // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    const flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(find(fragments, frag => frag.search(/,|\\s/) !== -1));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    let mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce((a, b) => {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(str => toValue(str, measurement, popperOffsets, referenceOffsets));\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  let boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return { [mainSide]: value };\n    }\n  };\n\n  order.forEach(placement => {\n    const side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement]\n      }\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(data.instance.modifiers, modifier => modifier.name === 'preventOverflow').boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nclass Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    this.scheduleUpdate = () => requestAnimationFrame(this.update);\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(name => {\n      this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(name => _extends({\n      name\n    }, this.options.modifiers[name]))\n    // sort the modifiers by order\n    .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(this.reference, this.popper, this.options, modifierOptions, this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\nexport default Popper;\n//# sourceMappingURL=popper.js.map\n"]}