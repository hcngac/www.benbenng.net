{"id":"node_modules/route-recognizer/dist/route-recognizer.js","dependencies":[{"name":"/bulk/signalng/Workspaces/www.benbenng.net/node_modules/route-recognizer/package.json","includedInParent":true,"mtime":1533952278556},{"name":"/bulk/signalng/Workspaces/www.benbenng.net/package.json","includedInParent":true,"mtime":1533953332322}],"generated":{"js":"var define;\nvar global = arguments[3];\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define('route-recognizer', factory) :\n\t(global.RouteRecognizer = factory());\n}(this, (function () { 'use strict';\n\nvar createObject = Object.create;\nfunction createMap() {\n    var map = createObject(null);\n    map[\"__\"] = undefined;\n    delete map[\"__\"];\n    return map;\n}\n\nvar Target = function Target(path, matcher, delegate) {\n    this.path = path;\n    this.matcher = matcher;\n    this.delegate = delegate;\n};\nTarget.prototype.to = function to (target, callback) {\n    var delegate = this.delegate;\n    if (delegate && delegate.willAddRoute) {\n        target = delegate.willAddRoute(this.matcher.target, target);\n    }\n    this.matcher.add(this.path, target);\n    if (callback) {\n        if (callback.length === 0) {\n            throw new Error(\"You must have an argument in the function passed to `to`\");\n        }\n        this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n};\nvar Matcher = function Matcher(target) {\n    this.routes = createMap();\n    this.children = createMap();\n    this.target = target;\n};\nMatcher.prototype.add = function add (path, target) {\n    this.routes[path] = target;\n};\nMatcher.prototype.addChild = function addChild (path, target, callback, delegate) {\n    var matcher = new Matcher(target);\n    this.children[path] = matcher;\n    var match = generateMatch(path, matcher, delegate);\n    if (delegate && delegate.contextEntered) {\n        delegate.contextEntered(target, match);\n    }\n    callback(match);\n};\nfunction generateMatch(startingPath, matcher, delegate) {\n    function match(path, callback) {\n        var fullPath = startingPath + path;\n        if (callback) {\n            callback(generateMatch(fullPath, matcher, delegate));\n        }\n        else {\n            return new Target(fullPath, matcher, delegate);\n        }\n    }\n    \n    return match;\n}\nfunction addRoute(routeArray, path, handler) {\n    var len = 0;\n    for (var i = 0; i < routeArray.length; i++) {\n        len += routeArray[i].path.length;\n    }\n    path = path.substr(len);\n    var route = { path: path, handler: handler };\n    routeArray.push(route);\n}\nfunction eachRoute(baseRoute, matcher, callback, binding) {\n    var routes = matcher.routes;\n    var paths = Object.keys(routes);\n    for (var i = 0; i < paths.length; i++) {\n        var path = paths[i];\n        var routeArray = baseRoute.slice();\n        addRoute(routeArray, path, routes[path]);\n        var nested = matcher.children[path];\n        if (nested) {\n            eachRoute(routeArray, nested, callback, binding);\n        }\n        else {\n            callback.call(binding, routeArray);\n        }\n    }\n}\nvar map = function (callback, addRouteCallback) {\n    var matcher = new Matcher();\n    callback(generateMatch(\"\", matcher, this.delegate));\n    eachRoute([], matcher, function (routes) {\n        if (addRouteCallback) {\n            addRouteCallback(this, routes);\n        }\n        else {\n            this.add(routes);\n        }\n    }, this);\n};\n\n// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\n// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\nfunction normalizePath(path) {\n    return path.split(\"/\")\n        .map(normalizeSegment)\n        .join(\"/\");\n}\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nvar SEGMENT_RESERVED_CHARS = /%|\\//g;\nfunction normalizeSegment(segment) {\n    if (segment.length < 3 || segment.indexOf(\"%\") === -1)\n        { return segment; }\n    return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nvar PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\nfunction encodePathSegment(str) {\n    return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n\nvar escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\nvar isArray = Array.isArray;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction getParam(params, key) {\n    if (typeof params !== \"object\" || params === null) {\n        throw new Error(\"You must pass an object as the second argument to `generate`.\");\n    }\n    if (!hasOwnProperty.call(params, key)) {\n        throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n    }\n    var value = params[key];\n    var str = typeof value === \"string\" ? value : \"\" + value;\n    if (str.length === 0) {\n        throw new Error(\"You must provide a param `\" + key + \"`.\");\n    }\n    return str;\n}\nvar eachChar = [];\neachChar[0 /* Static */] = function (segment, currentState) {\n    var state = currentState;\n    var value = segment.value;\n    for (var i = 0; i < value.length; i++) {\n        var ch = value.charCodeAt(i);\n        state = state.put(ch, false, false);\n    }\n    return state;\n};\neachChar[1 /* Dynamic */] = function (_, currentState) {\n    return currentState.put(47 /* SLASH */, true, true);\n};\neachChar[2 /* Star */] = function (_, currentState) {\n    return currentState.put(-1 /* ANY */, false, true);\n};\neachChar[4 /* Epsilon */] = function (_, currentState) {\n    return currentState;\n};\nvar regex = [];\nregex[0 /* Static */] = function (segment) {\n    return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\nregex[1 /* Dynamic */] = function () {\n    return \"([^/]+)\";\n};\nregex[2 /* Star */] = function () {\n    return \"(.+)\";\n};\nregex[4 /* Epsilon */] = function () {\n    return \"\";\n};\nvar generate = [];\ngenerate[0 /* Static */] = function (segment) {\n    return segment.value;\n};\ngenerate[1 /* Dynamic */] = function (segment, params) {\n    var value = getParam(params, segment.value);\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n        return encodePathSegment(value);\n    }\n    else {\n        return value;\n    }\n};\ngenerate[2 /* Star */] = function (segment, params) {\n    return getParam(params, segment.value);\n};\ngenerate[4 /* Epsilon */] = function () {\n    return \"\";\n};\nvar EmptyObject = Object.freeze({});\nvar EmptyArray = Object.freeze([]);\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(segments, route, types) {\n    // normalize route as not starting with a \"/\". Recognition will\n    // also normalize.\n    if (route.length > 0 && route.charCodeAt(0) === 47 /* SLASH */) {\n        route = route.substr(1);\n    }\n    var parts = route.split(\"/\");\n    var names = undefined;\n    var shouldDecodes = undefined;\n    for (var i = 0; i < parts.length; i++) {\n        var part = parts[i];\n        var flags = 0;\n        var type = 0;\n        if (part === \"\") {\n            type = 4 /* Epsilon */;\n        }\n        else if (part.charCodeAt(0) === 58 /* COLON */) {\n            type = 1 /* Dynamic */;\n        }\n        else if (part.charCodeAt(0) === 42 /* STAR */) {\n            type = 2 /* Star */;\n        }\n        else {\n            type = 0 /* Static */;\n        }\n        flags = 2 << type;\n        if (flags & 12 /* Named */) {\n            part = part.slice(1);\n            names = names || [];\n            names.push(part);\n            shouldDecodes = shouldDecodes || [];\n            shouldDecodes.push((flags & 4 /* Decoded */) !== 0);\n        }\n        if (flags & 14 /* Counted */) {\n            types[type]++;\n        }\n        segments.push({\n            type: type,\n            value: normalizeSegment(part)\n        });\n    }\n    return {\n        names: names || EmptyArray,\n        shouldDecodes: shouldDecodes || EmptyArray,\n    };\n}\nfunction isEqualCharSpec(spec, char, negate) {\n    return spec.char === char && spec.negate === negate;\n}\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\nvar State = function State(states, id, char, negate, repeat) {\n    this.states = states;\n    this.id = id;\n    this.char = char;\n    this.negate = negate;\n    this.nextStates = repeat ? id : null;\n    this.pattern = \"\";\n    this._regex = undefined;\n    this.handlers = undefined;\n    this.types = undefined;\n};\nState.prototype.regex = function regex$1 () {\n    if (!this._regex) {\n        this._regex = new RegExp(this.pattern);\n    }\n    return this._regex;\n};\nState.prototype.get = function get (char, negate) {\n        var this$1 = this;\n\n    var nextStates = this.nextStates;\n    if (nextStates === null)\n        { return; }\n    if (isArray(nextStates)) {\n        for (var i = 0; i < nextStates.length; i++) {\n            var child = this$1.states[nextStates[i]];\n            if (isEqualCharSpec(child, char, negate)) {\n                return child;\n            }\n        }\n    }\n    else {\n        var child$1 = this.states[nextStates];\n        if (isEqualCharSpec(child$1, char, negate)) {\n            return child$1;\n        }\n    }\n};\nState.prototype.put = function put (char, negate, repeat) {\n    var state;\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(char, negate)) {\n        return state;\n    }\n    // Make a new state for the character spec\n    var states = this.states;\n    state = new State(states, states.length, char, negate, repeat);\n    states[states.length] = state;\n    // Insert the new state as a child of the current state\n    if (this.nextStates == null) {\n        this.nextStates = state.id;\n    }\n    else if (isArray(this.nextStates)) {\n        this.nextStates.push(state.id);\n    }\n    else {\n        this.nextStates = [this.nextStates, state.id];\n    }\n    // Return the new state\n    return state;\n};\n// Find a list of child states matching the next character\nState.prototype.match = function match (ch) {\n        var this$1 = this;\n\n    var nextStates = this.nextStates;\n    if (!nextStates)\n        { return []; }\n    var returned = [];\n    if (isArray(nextStates)) {\n        for (var i = 0; i < nextStates.length; i++) {\n            var child = this$1.states[nextStates[i]];\n            if (isMatch(child, ch)) {\n                returned.push(child);\n            }\n        }\n    }\n    else {\n        var child$1 = this.states[nextStates];\n        if (isMatch(child$1, ch)) {\n            returned.push(child$1);\n        }\n    }\n    return returned;\n};\nfunction isMatch(spec, char) {\n    return spec.negate ? spec.char !== char && spec.char !== -1 /* ANY */ : spec.char === char || spec.char === -1 /* ANY */;\n}\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states) {\n    return states.sort(function (a, b) {\n        var ref = a.types || [0, 0, 0];\n        var astatics = ref[0];\n        var adynamics = ref[1];\n        var astars = ref[2];\n        var ref$1 = b.types || [0, 0, 0];\n        var bstatics = ref$1[0];\n        var bdynamics = ref$1[1];\n        var bstars = ref$1[2];\n        if (astars !== bstars) {\n            return astars - bstars;\n        }\n        if (astars) {\n            if (astatics !== bstatics) {\n                return bstatics - astatics;\n            }\n            if (adynamics !== bdynamics) {\n                return bdynamics - adynamics;\n            }\n        }\n        if (adynamics !== bdynamics) {\n            return adynamics - bdynamics;\n        }\n        if (astatics !== bstatics) {\n            return bstatics - astatics;\n        }\n        return 0;\n    });\n}\nfunction recognizeChar(states, ch) {\n    var nextStates = [];\n    for (var i = 0, l = states.length; i < l; i++) {\n        var state = states[i];\n        nextStates = nextStates.concat(state.match(ch));\n    }\n    return nextStates;\n}\nvar RecognizeResults = function RecognizeResults(queryParams) {\n    this.length = 0;\n    this.queryParams = queryParams || {};\n};\n\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice = Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\nfunction findHandler(state, originalPath, queryParams) {\n    var handlers = state.handlers;\n    var regex = state.regex();\n    if (!regex || !handlers)\n        { throw new Error(\"state not initialized\"); }\n    var captures = originalPath.match(regex);\n    var currentCapture = 1;\n    var result = new RecognizeResults(queryParams);\n    result.length = handlers.length;\n    for (var i = 0; i < handlers.length; i++) {\n        var handler = handlers[i];\n        var names = handler.names;\n        var shouldDecodes = handler.shouldDecodes;\n        var params = EmptyObject;\n        var isDynamic = false;\n        if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n            for (var j = 0; j < names.length; j++) {\n                isDynamic = true;\n                var name = names[j];\n                var capture = captures && captures[currentCapture++];\n                if (params === EmptyObject) {\n                    params = {};\n                }\n                if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n                    params[name] = capture && decodeURIComponent(capture);\n                }\n                else {\n                    params[name] = capture;\n                }\n            }\n        }\n        result[i] = {\n            handler: handler.handler,\n            params: params,\n            isDynamic: isDynamic\n        };\n    }\n    return result;\n}\nfunction decodeQueryParamPart(part) {\n    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n    part = part.replace(/\\+/gm, \"%20\");\n    var result;\n    try {\n        result = decodeURIComponent(part);\n    }\n    catch (error) {\n        result = \"\";\n    }\n    return result;\n}\nvar RouteRecognizer = function RouteRecognizer() {\n    this.names = createMap();\n    var states = [];\n    var state = new State(states, 0, -1 /* ANY */, true, false);\n    states[0] = state;\n    this.states = states;\n    this.rootState = state;\n};\nRouteRecognizer.prototype.add = function add (routes, options) {\n    var currentState = this.rootState;\n    var pattern = \"^\";\n    var types = [0, 0, 0];\n    var handlers = new Array(routes.length);\n    var allSegments = [];\n    var isEmpty = true;\n    var j = 0;\n    for (var i = 0; i < routes.length; i++) {\n        var route = routes[i];\n        var ref = parse(allSegments, route.path, types);\n            var names = ref.names;\n            var shouldDecodes = ref.shouldDecodes;\n        // preserve j so it points to the start of newly added segments\n        for (; j < allSegments.length; j++) {\n            var segment = allSegments[j];\n            if (segment.type === 4 /* Epsilon */) {\n                continue;\n            }\n            isEmpty = false;\n            // Add a \"/\" for the new segment\n            currentState = currentState.put(47 /* SLASH */, false, false);\n            pattern += \"/\";\n            // Add a representation of the segment to the NFA and regex\n            currentState = eachChar[segment.type](segment, currentState);\n            pattern += regex[segment.type](segment);\n        }\n        handlers[i] = {\n            handler: route.handler,\n            names: names,\n            shouldDecodes: shouldDecodes\n        };\n    }\n    if (isEmpty) {\n        currentState = currentState.put(47 /* SLASH */, false, false);\n        pattern += \"/\";\n    }\n    currentState.handlers = handlers;\n    currentState.pattern = pattern + \"$\";\n    currentState.types = types;\n    var name;\n    if (typeof options === \"object\" && options !== null && options.as) {\n        name = options.as;\n    }\n    if (name) {\n        // if (this.names[name]) {\n        //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n        // }\n        this.names[name] = {\n            segments: allSegments,\n            handlers: handlers\n        };\n    }\n};\nRouteRecognizer.prototype.handlersFor = function handlersFor (name) {\n    var route = this.names[name];\n    if (!route) {\n        throw new Error(\"There is no route named \" + name);\n    }\n    var result = new Array(route.handlers.length);\n    for (var i = 0; i < route.handlers.length; i++) {\n        var handler = route.handlers[i];\n        result[i] = handler;\n    }\n    return result;\n};\nRouteRecognizer.prototype.hasRoute = function hasRoute (name) {\n    return !!this.names[name];\n};\nRouteRecognizer.prototype.generate = function generate$1 (name, params) {\n    var route = this.names[name];\n    var output = \"\";\n    if (!route) {\n        throw new Error(\"There is no route named \" + name);\n    }\n    var segments = route.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = segments[i];\n        if (segment.type === 4 /* Epsilon */) {\n            continue;\n        }\n        output += \"/\";\n        output += generate[segment.type](segment, params);\n    }\n    if (output.charAt(0) !== \"/\") {\n        output = \"/\" + output;\n    }\n    if (params && params.queryParams) {\n        output += this.generateQueryString(params.queryParams);\n    }\n    return output;\n};\nRouteRecognizer.prototype.generateQueryString = function generateQueryString (params) {\n    var pairs = [];\n    var keys = Object.keys(params);\n    keys.sort();\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var value = params[key];\n        if (value == null) {\n            continue;\n        }\n        var pair = encodeURIComponent(key);\n        if (isArray(value)) {\n            for (var j = 0; j < value.length; j++) {\n                var arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n                pairs.push(arrayPair);\n            }\n        }\n        else {\n            pair += \"=\" + encodeURIComponent(value);\n            pairs.push(pair);\n        }\n    }\n    if (pairs.length === 0) {\n        return \"\";\n    }\n    return \"?\" + pairs.join(\"&\");\n};\nRouteRecognizer.prototype.parseQueryString = function parseQueryString (queryString) {\n    var pairs = queryString.split(\"&\");\n    var queryParams = {};\n    for (var i = 0; i < pairs.length; i++) {\n        var pair = pairs[i].split(\"=\"), key = decodeQueryParamPart(pair[0]), keyLength = key.length, isArray = false, value = (void 0);\n        if (pair.length === 1) {\n            value = \"true\";\n        }\n        else {\n            // Handle arrays\n            if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n                isArray = true;\n                key = key.slice(0, keyLength - 2);\n                if (!queryParams[key]) {\n                    queryParams[key] = [];\n                }\n            }\n            value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n        }\n        if (isArray) {\n            queryParams[key].push(value);\n        }\n        else {\n            queryParams[key] = value;\n        }\n    }\n    return queryParams;\n};\nRouteRecognizer.prototype.recognize = function recognize (path) {\n    var results;\n    var states = [this.rootState];\n    var queryParams = {};\n    var isSlashDropped = false;\n    var hashStart = path.indexOf(\"#\");\n    if (hashStart !== -1) {\n        path = path.substr(0, hashStart);\n    }\n    var queryStart = path.indexOf(\"?\");\n    if (queryStart !== -1) {\n        var queryString = path.substr(queryStart + 1, path.length);\n        path = path.substr(0, queryStart);\n        queryParams = this.parseQueryString(queryString);\n    }\n    if (path.charAt(0) !== \"/\") {\n        path = \"/\" + path;\n    }\n    var originalPath = path;\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n        path = normalizePath(path);\n    }\n    else {\n        path = decodeURI(path);\n        originalPath = decodeURI(originalPath);\n    }\n    var pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n        path = path.substr(0, pathLen - 1);\n        originalPath = originalPath.substr(0, originalPath.length - 1);\n        isSlashDropped = true;\n    }\n    for (var i = 0; i < path.length; i++) {\n        states = recognizeChar(states, path.charCodeAt(i));\n        if (!states.length) {\n            break;\n        }\n    }\n    var solutions = [];\n    for (var i$1 = 0; i$1 < states.length; i$1++) {\n        if (states[i$1].handlers) {\n            solutions.push(states[i$1]);\n        }\n    }\n    states = sortSolutions(solutions);\n    var state = solutions[0];\n    if (state && state.handlers) {\n        // if a trailing slash was dropped and a star segment is the last segment\n        // specified, put the trailing slash back\n        if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n            originalPath = originalPath + \"/\";\n        }\n        results = findHandler(state, originalPath, queryParams);\n    }\n    return results;\n};\nRouteRecognizer.VERSION = \"0.3.4\";\n// Set to false to opt-out of encoding and decoding path segments.\n// See https://github.com/tildeio/route-recognizer/pull/55\nRouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;\nRouteRecognizer.Normalizer = {\n    normalizeSegment: normalizeSegment, normalizePath: normalizePath, encodePathSegment: encodePathSegment\n};\nRouteRecognizer.prototype.map = map;\n\nreturn RouteRecognizer;\n\n})));\n\n//# sourceMappingURL=route-recognizer.js.map\n","map":{"mappings":[{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":206,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":208,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":209,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":210,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":211,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":212,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":213,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":214,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":215,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":216,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":217,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":218,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":219,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":220,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":221,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":222,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":223,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":224,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":225,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":226,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":227,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":228,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":229,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":230,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":231,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":232,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":233,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":234,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":235,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":236,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":237,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":238,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":239,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":240,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":241,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":242,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":243,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":244,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":245,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":246,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":247,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":248,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":249,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":250,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":251,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":252,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":253,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":254,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":255,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":256,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":257,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":258,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":259,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":260,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":261,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":262,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":263,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":264,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":265,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":266,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":267,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":268,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":269,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":270,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":271,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":272,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":273,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":274,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":275,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":276,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":277,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":278,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":279,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":280,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":281,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":282,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":283,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":284,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":285,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":286,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":287,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":288,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":289,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":290,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":291,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":292,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":293,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":294,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":295,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":296,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":297,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":298,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":299,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":300,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":301,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":302,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":303,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":304,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":305,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":306,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":307,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":308,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":309,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":310,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":311,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":312,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":313,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":314,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":315,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":316,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":317,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":318,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":319,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":320,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":321,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":322,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":323,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":324,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":325,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":326,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":327,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":328,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":329,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":330,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":331,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":332,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":333,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":334,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":335,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":336,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":337,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":338,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":339,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":340,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":341,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":342,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":343,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":344,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":345,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":346,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":347,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":348,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":349,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":350,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":351,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":352,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":353,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":354,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":355,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":356,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":357,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":358,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":359,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":360,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":361,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":362,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":363,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":364,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":365,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":366,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":367,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":368,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":369,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":370,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":371,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":372,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":373,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":374,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":375,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":376,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":377,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":378,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":379,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":380,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":381,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":382,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":383,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":384,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":385,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":386,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":387,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":388,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":389,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":390,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":391,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":392,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":393,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":394,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":395,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":396,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":397,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":398,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":399,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":400,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":401,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":402,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":403,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":404,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":405,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":406,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":407,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":408,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":409,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":410,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":411,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":412,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":413,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":414,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":415,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":416,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":417,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":418,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":419,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":420,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":421,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":422,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":423,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":424,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":425,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":426,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":427,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":428,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":429,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":430,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":431,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":432,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":433,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":434,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":435,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":436,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":437,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":438,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":439,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":440,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":441,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":442,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":443,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":444,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":445,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":446,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":447,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":448,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":449,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":450,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":451,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":452,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":453,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":454,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":455,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":456,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":457,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":458,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":459,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":460,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":461,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":462,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":463,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":464,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":465,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":466,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":467,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":468,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":469,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":470,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":471,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":472,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":473,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":474,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":475,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":476,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":477,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":478,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":479,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":480,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":481,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":482,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":483,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":484,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":485,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":486,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":487,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":488,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":489,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":490,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":491,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":492,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":493,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":494,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":495,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":496,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":497,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":498,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":499,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":500,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":501,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":502,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":503,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":504,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":505,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":506,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":507,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":508,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":509,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":510,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":511,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":512,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":513,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":514,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":515,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":516,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":517,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":518,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":519,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":520,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":521,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":522,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":523,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":524,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":525,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":526,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":527,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":528,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":529,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":530,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":531,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":532,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":533,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":534,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":535,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":536,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":537,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":538,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":539,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":540,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":541,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":542,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":543,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":544,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":545,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":546,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":547,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":548,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":549,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":550,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":551,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":552,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":553,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":554,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":555,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":556,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":557,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":558,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":559,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":560,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":561,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":562,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":563,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":564,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":565,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":566,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":567,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":568,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":569,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":570,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":571,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":572,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":573,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":574,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":575,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":576,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":577,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":578,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":579,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":580,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":581,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":582,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":583,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":584,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":585,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":586,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":587,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":588,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":589,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":590,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":591,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":592,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":593,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":594,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":595,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":596,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":597,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":598,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":599,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":600,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":601,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":602,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":603,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":604,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":605,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":606,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":607,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":608,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":609,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":610,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":611,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":612,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":613,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":614,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":615,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":616,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":617,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":618,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":619,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":620,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":621,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":622,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":623,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":624,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":625,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":626,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":627,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":628,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":629,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":630,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":631,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":632,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":633,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":634,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":635,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":636,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":637,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":638,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":639,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":640,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":641,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":642,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":643,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":644,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":645,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":646,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":647,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":648,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":649,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":650,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":651,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":652,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":653,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":654,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":655,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":656,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":657,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":658,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":659,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":660,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":661,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":662,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":663,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":664,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":665,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":666,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":667,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":668,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":669,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":670,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":671,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":672,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":673,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":674,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":675,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":676,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":677,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":678,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":679,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":680,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":681,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":682,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":683,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":684,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":685,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":686,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":687,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":688,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":689,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":690,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":691,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":692,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":693,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/route-recognizer/dist/route-recognizer.js","original":{"line":694,"column":0},"generated":{"line":696,"column":0}}],"sources":{"node_modules/route-recognizer/dist/route-recognizer.js":"(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define('route-recognizer', factory) :\n\t(global.RouteRecognizer = factory());\n}(this, (function () { 'use strict';\n\nvar createObject = Object.create;\nfunction createMap() {\n    var map = createObject(null);\n    map[\"__\"] = undefined;\n    delete map[\"__\"];\n    return map;\n}\n\nvar Target = function Target(path, matcher, delegate) {\n    this.path = path;\n    this.matcher = matcher;\n    this.delegate = delegate;\n};\nTarget.prototype.to = function to (target, callback) {\n    var delegate = this.delegate;\n    if (delegate && delegate.willAddRoute) {\n        target = delegate.willAddRoute(this.matcher.target, target);\n    }\n    this.matcher.add(this.path, target);\n    if (callback) {\n        if (callback.length === 0) {\n            throw new Error(\"You must have an argument in the function passed to `to`\");\n        }\n        this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n};\nvar Matcher = function Matcher(target) {\n    this.routes = createMap();\n    this.children = createMap();\n    this.target = target;\n};\nMatcher.prototype.add = function add (path, target) {\n    this.routes[path] = target;\n};\nMatcher.prototype.addChild = function addChild (path, target, callback, delegate) {\n    var matcher = new Matcher(target);\n    this.children[path] = matcher;\n    var match = generateMatch(path, matcher, delegate);\n    if (delegate && delegate.contextEntered) {\n        delegate.contextEntered(target, match);\n    }\n    callback(match);\n};\nfunction generateMatch(startingPath, matcher, delegate) {\n    function match(path, callback) {\n        var fullPath = startingPath + path;\n        if (callback) {\n            callback(generateMatch(fullPath, matcher, delegate));\n        }\n        else {\n            return new Target(fullPath, matcher, delegate);\n        }\n    }\n    \n    return match;\n}\nfunction addRoute(routeArray, path, handler) {\n    var len = 0;\n    for (var i = 0; i < routeArray.length; i++) {\n        len += routeArray[i].path.length;\n    }\n    path = path.substr(len);\n    var route = { path: path, handler: handler };\n    routeArray.push(route);\n}\nfunction eachRoute(baseRoute, matcher, callback, binding) {\n    var routes = matcher.routes;\n    var paths = Object.keys(routes);\n    for (var i = 0; i < paths.length; i++) {\n        var path = paths[i];\n        var routeArray = baseRoute.slice();\n        addRoute(routeArray, path, routes[path]);\n        var nested = matcher.children[path];\n        if (nested) {\n            eachRoute(routeArray, nested, callback, binding);\n        }\n        else {\n            callback.call(binding, routeArray);\n        }\n    }\n}\nvar map = function (callback, addRouteCallback) {\n    var matcher = new Matcher();\n    callback(generateMatch(\"\", matcher, this.delegate));\n    eachRoute([], matcher, function (routes) {\n        if (addRouteCallback) {\n            addRouteCallback(this, routes);\n        }\n        else {\n            this.add(routes);\n        }\n    }, this);\n};\n\n// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\n// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\nfunction normalizePath(path) {\n    return path.split(\"/\")\n        .map(normalizeSegment)\n        .join(\"/\");\n}\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nvar SEGMENT_RESERVED_CHARS = /%|\\//g;\nfunction normalizeSegment(segment) {\n    if (segment.length < 3 || segment.indexOf(\"%\") === -1)\n        { return segment; }\n    return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nvar PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\nfunction encodePathSegment(str) {\n    return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n\nvar escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\nvar isArray = Array.isArray;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction getParam(params, key) {\n    if (typeof params !== \"object\" || params === null) {\n        throw new Error(\"You must pass an object as the second argument to `generate`.\");\n    }\n    if (!hasOwnProperty.call(params, key)) {\n        throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n    }\n    var value = params[key];\n    var str = typeof value === \"string\" ? value : \"\" + value;\n    if (str.length === 0) {\n        throw new Error(\"You must provide a param `\" + key + \"`.\");\n    }\n    return str;\n}\nvar eachChar = [];\neachChar[0 /* Static */] = function (segment, currentState) {\n    var state = currentState;\n    var value = segment.value;\n    for (var i = 0; i < value.length; i++) {\n        var ch = value.charCodeAt(i);\n        state = state.put(ch, false, false);\n    }\n    return state;\n};\neachChar[1 /* Dynamic */] = function (_, currentState) {\n    return currentState.put(47 /* SLASH */, true, true);\n};\neachChar[2 /* Star */] = function (_, currentState) {\n    return currentState.put(-1 /* ANY */, false, true);\n};\neachChar[4 /* Epsilon */] = function (_, currentState) {\n    return currentState;\n};\nvar regex = [];\nregex[0 /* Static */] = function (segment) {\n    return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\nregex[1 /* Dynamic */] = function () {\n    return \"([^/]+)\";\n};\nregex[2 /* Star */] = function () {\n    return \"(.+)\";\n};\nregex[4 /* Epsilon */] = function () {\n    return \"\";\n};\nvar generate = [];\ngenerate[0 /* Static */] = function (segment) {\n    return segment.value;\n};\ngenerate[1 /* Dynamic */] = function (segment, params) {\n    var value = getParam(params, segment.value);\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n        return encodePathSegment(value);\n    }\n    else {\n        return value;\n    }\n};\ngenerate[2 /* Star */] = function (segment, params) {\n    return getParam(params, segment.value);\n};\ngenerate[4 /* Epsilon */] = function () {\n    return \"\";\n};\nvar EmptyObject = Object.freeze({});\nvar EmptyArray = Object.freeze([]);\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(segments, route, types) {\n    // normalize route as not starting with a \"/\". Recognition will\n    // also normalize.\n    if (route.length > 0 && route.charCodeAt(0) === 47 /* SLASH */) {\n        route = route.substr(1);\n    }\n    var parts = route.split(\"/\");\n    var names = undefined;\n    var shouldDecodes = undefined;\n    for (var i = 0; i < parts.length; i++) {\n        var part = parts[i];\n        var flags = 0;\n        var type = 0;\n        if (part === \"\") {\n            type = 4 /* Epsilon */;\n        }\n        else if (part.charCodeAt(0) === 58 /* COLON */) {\n            type = 1 /* Dynamic */;\n        }\n        else if (part.charCodeAt(0) === 42 /* STAR */) {\n            type = 2 /* Star */;\n        }\n        else {\n            type = 0 /* Static */;\n        }\n        flags = 2 << type;\n        if (flags & 12 /* Named */) {\n            part = part.slice(1);\n            names = names || [];\n            names.push(part);\n            shouldDecodes = shouldDecodes || [];\n            shouldDecodes.push((flags & 4 /* Decoded */) !== 0);\n        }\n        if (flags & 14 /* Counted */) {\n            types[type]++;\n        }\n        segments.push({\n            type: type,\n            value: normalizeSegment(part)\n        });\n    }\n    return {\n        names: names || EmptyArray,\n        shouldDecodes: shouldDecodes || EmptyArray,\n    };\n}\nfunction isEqualCharSpec(spec, char, negate) {\n    return spec.char === char && spec.negate === negate;\n}\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\nvar State = function State(states, id, char, negate, repeat) {\n    this.states = states;\n    this.id = id;\n    this.char = char;\n    this.negate = negate;\n    this.nextStates = repeat ? id : null;\n    this.pattern = \"\";\n    this._regex = undefined;\n    this.handlers = undefined;\n    this.types = undefined;\n};\nState.prototype.regex = function regex$1 () {\n    if (!this._regex) {\n        this._regex = new RegExp(this.pattern);\n    }\n    return this._regex;\n};\nState.prototype.get = function get (char, negate) {\n        var this$1 = this;\n\n    var nextStates = this.nextStates;\n    if (nextStates === null)\n        { return; }\n    if (isArray(nextStates)) {\n        for (var i = 0; i < nextStates.length; i++) {\n            var child = this$1.states[nextStates[i]];\n            if (isEqualCharSpec(child, char, negate)) {\n                return child;\n            }\n        }\n    }\n    else {\n        var child$1 = this.states[nextStates];\n        if (isEqualCharSpec(child$1, char, negate)) {\n            return child$1;\n        }\n    }\n};\nState.prototype.put = function put (char, negate, repeat) {\n    var state;\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(char, negate)) {\n        return state;\n    }\n    // Make a new state for the character spec\n    var states = this.states;\n    state = new State(states, states.length, char, negate, repeat);\n    states[states.length] = state;\n    // Insert the new state as a child of the current state\n    if (this.nextStates == null) {\n        this.nextStates = state.id;\n    }\n    else if (isArray(this.nextStates)) {\n        this.nextStates.push(state.id);\n    }\n    else {\n        this.nextStates = [this.nextStates, state.id];\n    }\n    // Return the new state\n    return state;\n};\n// Find a list of child states matching the next character\nState.prototype.match = function match (ch) {\n        var this$1 = this;\n\n    var nextStates = this.nextStates;\n    if (!nextStates)\n        { return []; }\n    var returned = [];\n    if (isArray(nextStates)) {\n        for (var i = 0; i < nextStates.length; i++) {\n            var child = this$1.states[nextStates[i]];\n            if (isMatch(child, ch)) {\n                returned.push(child);\n            }\n        }\n    }\n    else {\n        var child$1 = this.states[nextStates];\n        if (isMatch(child$1, ch)) {\n            returned.push(child$1);\n        }\n    }\n    return returned;\n};\nfunction isMatch(spec, char) {\n    return spec.negate ? spec.char !== char && spec.char !== -1 /* ANY */ : spec.char === char || spec.char === -1 /* ANY */;\n}\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states) {\n    return states.sort(function (a, b) {\n        var ref = a.types || [0, 0, 0];\n        var astatics = ref[0];\n        var adynamics = ref[1];\n        var astars = ref[2];\n        var ref$1 = b.types || [0, 0, 0];\n        var bstatics = ref$1[0];\n        var bdynamics = ref$1[1];\n        var bstars = ref$1[2];\n        if (astars !== bstars) {\n            return astars - bstars;\n        }\n        if (astars) {\n            if (astatics !== bstatics) {\n                return bstatics - astatics;\n            }\n            if (adynamics !== bdynamics) {\n                return bdynamics - adynamics;\n            }\n        }\n        if (adynamics !== bdynamics) {\n            return adynamics - bdynamics;\n        }\n        if (astatics !== bstatics) {\n            return bstatics - astatics;\n        }\n        return 0;\n    });\n}\nfunction recognizeChar(states, ch) {\n    var nextStates = [];\n    for (var i = 0, l = states.length; i < l; i++) {\n        var state = states[i];\n        nextStates = nextStates.concat(state.match(ch));\n    }\n    return nextStates;\n}\nvar RecognizeResults = function RecognizeResults(queryParams) {\n    this.length = 0;\n    this.queryParams = queryParams || {};\n};\n\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice = Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\nfunction findHandler(state, originalPath, queryParams) {\n    var handlers = state.handlers;\n    var regex = state.regex();\n    if (!regex || !handlers)\n        { throw new Error(\"state not initialized\"); }\n    var captures = originalPath.match(regex);\n    var currentCapture = 1;\n    var result = new RecognizeResults(queryParams);\n    result.length = handlers.length;\n    for (var i = 0; i < handlers.length; i++) {\n        var handler = handlers[i];\n        var names = handler.names;\n        var shouldDecodes = handler.shouldDecodes;\n        var params = EmptyObject;\n        var isDynamic = false;\n        if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n            for (var j = 0; j < names.length; j++) {\n                isDynamic = true;\n                var name = names[j];\n                var capture = captures && captures[currentCapture++];\n                if (params === EmptyObject) {\n                    params = {};\n                }\n                if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n                    params[name] = capture && decodeURIComponent(capture);\n                }\n                else {\n                    params[name] = capture;\n                }\n            }\n        }\n        result[i] = {\n            handler: handler.handler,\n            params: params,\n            isDynamic: isDynamic\n        };\n    }\n    return result;\n}\nfunction decodeQueryParamPart(part) {\n    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n    part = part.replace(/\\+/gm, \"%20\");\n    var result;\n    try {\n        result = decodeURIComponent(part);\n    }\n    catch (error) {\n        result = \"\";\n    }\n    return result;\n}\nvar RouteRecognizer = function RouteRecognizer() {\n    this.names = createMap();\n    var states = [];\n    var state = new State(states, 0, -1 /* ANY */, true, false);\n    states[0] = state;\n    this.states = states;\n    this.rootState = state;\n};\nRouteRecognizer.prototype.add = function add (routes, options) {\n    var currentState = this.rootState;\n    var pattern = \"^\";\n    var types = [0, 0, 0];\n    var handlers = new Array(routes.length);\n    var allSegments = [];\n    var isEmpty = true;\n    var j = 0;\n    for (var i = 0; i < routes.length; i++) {\n        var route = routes[i];\n        var ref = parse(allSegments, route.path, types);\n            var names = ref.names;\n            var shouldDecodes = ref.shouldDecodes;\n        // preserve j so it points to the start of newly added segments\n        for (; j < allSegments.length; j++) {\n            var segment = allSegments[j];\n            if (segment.type === 4 /* Epsilon */) {\n                continue;\n            }\n            isEmpty = false;\n            // Add a \"/\" for the new segment\n            currentState = currentState.put(47 /* SLASH */, false, false);\n            pattern += \"/\";\n            // Add a representation of the segment to the NFA and regex\n            currentState = eachChar[segment.type](segment, currentState);\n            pattern += regex[segment.type](segment);\n        }\n        handlers[i] = {\n            handler: route.handler,\n            names: names,\n            shouldDecodes: shouldDecodes\n        };\n    }\n    if (isEmpty) {\n        currentState = currentState.put(47 /* SLASH */, false, false);\n        pattern += \"/\";\n    }\n    currentState.handlers = handlers;\n    currentState.pattern = pattern + \"$\";\n    currentState.types = types;\n    var name;\n    if (typeof options === \"object\" && options !== null && options.as) {\n        name = options.as;\n    }\n    if (name) {\n        // if (this.names[name]) {\n        //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n        // }\n        this.names[name] = {\n            segments: allSegments,\n            handlers: handlers\n        };\n    }\n};\nRouteRecognizer.prototype.handlersFor = function handlersFor (name) {\n    var route = this.names[name];\n    if (!route) {\n        throw new Error(\"There is no route named \" + name);\n    }\n    var result = new Array(route.handlers.length);\n    for (var i = 0; i < route.handlers.length; i++) {\n        var handler = route.handlers[i];\n        result[i] = handler;\n    }\n    return result;\n};\nRouteRecognizer.prototype.hasRoute = function hasRoute (name) {\n    return !!this.names[name];\n};\nRouteRecognizer.prototype.generate = function generate$1 (name, params) {\n    var route = this.names[name];\n    var output = \"\";\n    if (!route) {\n        throw new Error(\"There is no route named \" + name);\n    }\n    var segments = route.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = segments[i];\n        if (segment.type === 4 /* Epsilon */) {\n            continue;\n        }\n        output += \"/\";\n        output += generate[segment.type](segment, params);\n    }\n    if (output.charAt(0) !== \"/\") {\n        output = \"/\" + output;\n    }\n    if (params && params.queryParams) {\n        output += this.generateQueryString(params.queryParams);\n    }\n    return output;\n};\nRouteRecognizer.prototype.generateQueryString = function generateQueryString (params) {\n    var pairs = [];\n    var keys = Object.keys(params);\n    keys.sort();\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var value = params[key];\n        if (value == null) {\n            continue;\n        }\n        var pair = encodeURIComponent(key);\n        if (isArray(value)) {\n            for (var j = 0; j < value.length; j++) {\n                var arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n                pairs.push(arrayPair);\n            }\n        }\n        else {\n            pair += \"=\" + encodeURIComponent(value);\n            pairs.push(pair);\n        }\n    }\n    if (pairs.length === 0) {\n        return \"\";\n    }\n    return \"?\" + pairs.join(\"&\");\n};\nRouteRecognizer.prototype.parseQueryString = function parseQueryString (queryString) {\n    var pairs = queryString.split(\"&\");\n    var queryParams = {};\n    for (var i = 0; i < pairs.length; i++) {\n        var pair = pairs[i].split(\"=\"), key = decodeQueryParamPart(pair[0]), keyLength = key.length, isArray = false, value = (void 0);\n        if (pair.length === 1) {\n            value = \"true\";\n        }\n        else {\n            // Handle arrays\n            if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n                isArray = true;\n                key = key.slice(0, keyLength - 2);\n                if (!queryParams[key]) {\n                    queryParams[key] = [];\n                }\n            }\n            value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n        }\n        if (isArray) {\n            queryParams[key].push(value);\n        }\n        else {\n            queryParams[key] = value;\n        }\n    }\n    return queryParams;\n};\nRouteRecognizer.prototype.recognize = function recognize (path) {\n    var results;\n    var states = [this.rootState];\n    var queryParams = {};\n    var isSlashDropped = false;\n    var hashStart = path.indexOf(\"#\");\n    if (hashStart !== -1) {\n        path = path.substr(0, hashStart);\n    }\n    var queryStart = path.indexOf(\"?\");\n    if (queryStart !== -1) {\n        var queryString = path.substr(queryStart + 1, path.length);\n        path = path.substr(0, queryStart);\n        queryParams = this.parseQueryString(queryString);\n    }\n    if (path.charAt(0) !== \"/\") {\n        path = \"/\" + path;\n    }\n    var originalPath = path;\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n        path = normalizePath(path);\n    }\n    else {\n        path = decodeURI(path);\n        originalPath = decodeURI(originalPath);\n    }\n    var pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n        path = path.substr(0, pathLen - 1);\n        originalPath = originalPath.substr(0, originalPath.length - 1);\n        isSlashDropped = true;\n    }\n    for (var i = 0; i < path.length; i++) {\n        states = recognizeChar(states, path.charCodeAt(i));\n        if (!states.length) {\n            break;\n        }\n    }\n    var solutions = [];\n    for (var i$1 = 0; i$1 < states.length; i$1++) {\n        if (states[i$1].handlers) {\n            solutions.push(states[i$1]);\n        }\n    }\n    states = sortSolutions(solutions);\n    var state = solutions[0];\n    if (state && state.handlers) {\n        // if a trailing slash was dropped and a star segment is the last segment\n        // specified, put the trailing slash back\n        if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n            originalPath = originalPath + \"/\";\n        }\n        results = findHandler(state, originalPath, queryParams);\n    }\n    return results;\n};\nRouteRecognizer.VERSION = \"0.3.4\";\n// Set to false to opt-out of encoding and decoding path segments.\n// See https://github.com/tildeio/route-recognizer/pull/55\nRouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;\nRouteRecognizer.Normalizer = {\n    normalizeSegment: normalizeSegment, normalizePath: normalizePath, encodePathSegment: encodePathSegment\n};\nRouteRecognizer.prototype.map = map;\n\nreturn RouteRecognizer;\n\n})));\n\n//# sourceMappingURL=route-recognizer.js.map\n"},"lineCount":696}},"hash":"6a9d202b8c307d0d2202729ab198101a","cacheData":{"env":{}}}